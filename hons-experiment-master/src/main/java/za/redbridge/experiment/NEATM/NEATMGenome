package za.redbridge.experiment.NEATM;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import org.encog.EncogError;
import org.encog.engine.network.activation.ActivationFunction;
import org.encog.mathutil.randomize.RangeRandomizer;
import org.encog.ml.ea.genome.BasicGenome;
import org.encog.ml.ea.genome.Genome;
import org.encog.neural.neat.NEATNeuronType;
import org.encog.neural.neat.NEATPopulation;
import org.encog.util.Format;

/**
 * Implements a NEAT genome. This is a "blueprint" for creating a neural
 * network.
 *
 * -----------------------------------------------------------------------------
 * http://www.cs.ucf.edu/~kstanley/ Encog's NEAT implementation was drawn from
 * the following three Journal Articles. For more complete BibTeX sources, see
 * NEATNetwork.java.
 *
 * Evolving Neural Networks Through Augmenting Topologies
 *
 * Generating Large-Scale Neural Networks Through Discovering Geometric
 * Regularities
 *
 * Automatic feature selection in neuroevolution
 *
 */
 public class NEATMGenome extends NEATGenome{}